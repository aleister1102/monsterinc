---
description: Refactor
globs: 
alwaysApply: false
---
AI Rule: Refactor Go Code for Clarity and Simplicity 🧼
Mục tiêu chính: Viết code Go dễ đọc, dễ hiểu, và dễ bảo trì bằng cách áp dụng các nguyên tắc Clean Code của Uncle Bob, nhưng linh hoạt để tránh sự phức tạp không cần thiết.

Nguyên tắc cốt lõi:

Ý nghĩa (Meaningful Names):

Đặt tên biến, hàm, struct, interface, package một cách rõ ràng, súc tích và có ý nghĩa. Tên nên mô tả đúng chức năng hoặc mục đích của nó.
Tránh viết tắt khó hiểu hoặc tên quá chung chung (ví dụ: a, b, data, processData).
Sử dụng camelCase cho tên biến và hàm (ví dụ: calculateTotalPrice), và PascalCase cho tên struct, interface, và các hằng số public (ví dụ: UserService, MaxConnections).
Tên package nên ngắn gọn, bằng chữ thường và phản ánh nội dung của package.
Hàm (Functions):

Ngắn gọn và chỉ làm một việc (Do One Thing): Hàm nên tập trung vào một nhiệm vụ duy nhất và thực hiện nó thật tốt. Nếu một hàm làm quá nhiều việc, hãy tách nó thành các hàm nhỏ hơn.
Ít tham số: Cố gắng giữ số lượng tham số của hàm ở mức tối thiểu (lý tưởng là 0, 1 hoặc 2). Nếu cần nhiều tham số, hãy xem xét việc nhóm chúng vào một struct.
Tránh hiệu ứng phụ (Side Effects): Hàm nên trả về giá trị thay vì thay đổi trạng thái của hệ thống một cách ngầm định, trừ khi đó là mục đích rõ ràng của hàm (ví dụ: hàm lưu vào database).
Mức độ trừu tượng nhất quán: Các câu lệnh trong một hàm nên ở cùng một mức độ trừu tượng.
Sử dụng error để xử lý lỗi: Tuân thủ quy ước trả về error làm giá trị cuối cùng của hàm có thể gây lỗi. Xử lý lỗi một cách rõ ràng và sớm nhất có thể.
Comment (Bình luận):

Cho phép comment trước hàm/lời gọi hàm để làm tường minh: Nếu tên hàm và ngữ cảnh chưa đủ rõ ràng, hãy viết comment giải thích "tại sao" (why) nó tồn tại hoặc "tại sao" một quyết định thiết kế cụ thể được đưa ra, thay vì chỉ mô tả "cái gì" (what) code đang làm (vì code nên tự mô tả điều đó).
Godoc: Viết Godoc cho các package, hàm, type, và hằng số public để người khác (và chính bạn trong tương lai) có thể hiểu cách sử dụng chúng.
Tránh comment dư thừa: Không comment những điều đã rõ ràng từ code.
Comment TODO: Sử dụng // TODO: hoặc // FIXME: để đánh dấu những chỗ cần cải thiện hoặc sửa lỗi trong tương lai, nhưng hãy cố gắng giải quyết chúng sớm.
Định dạng (Formatting):

Sử dụng gofmt hoặc goimports để tự động định dạng code. Điều này đảm bảo tính nhất quán và dễ đọc trong toàn bộ dự án.
Xử lý lỗi (Error Handling):

Xử lý lỗi một cách rõ ràng: Đừng bỏ qua lỗi. Kiểm tra giá trị error trả về từ các hàm và xử lý chúng một cách thích hợp (trả về, log, hoặc xử lý phục hồi).
Cung cấp ngữ cảnh cho lỗi để dễ dàng gỡ lỗi (ví dụ: fmt.Errorf("user service: failed to get user %d: %w", userID, err)).
Cấu trúc (Structure):

Tổ chức code thành các package có trách nhiệm rõ ràng.
Tránh import vòng (circular dependencies).
DRY (Don't Repeat Yourself): Tránh lặp lại code. Sử dụng hàm, struct, hoặc interface để tái sử dụng logic.

Ngoại lệ cần lưu ý:

Giảm thiểu việc sử dụng Design Pattern nếu quá overkill:
Ưu tiên sự đơn giản: Nếu một vấn đề có thể được giải quyết bằng một giải pháp đơn giản, dễ hiểu mà không cần đến một design pattern phức tạp, hãy chọn giải pháp đơn giản hơn.
Ngữ cảnh Go: Một số pattern phổ biến trong các ngôn ngữ khác có thể không cần thiết hoặc có cách triển khai tự nhiên hơn trong Go (ví dụ: interface của Go thường nhỏ và tập trung, không nhất thiết phải theo các pattern thiết kế interface phức tạp).
Đánh giá lợi ích và chi phí: Chỉ áp dụng design pattern khi lợi ích về khả năng bảo trì, mở rộng, hoặc dễ hiểu vượt trội so với sự phức tạp mà nó mang lại. Hãy tự hỏi: "Pattern này có thực sự giúp code dễ hiểu và dễ thay đổi hơn trong bối cảnh cụ thể này không?"
Cho phép các câu lệnh comment trước các hàm/lời gọi hàm để làm tường minh hàm:
Như đã đề cập ở mục "Comment", comment nên giải thích "tại sao" chứ không phải "cái gì". Nếu một đoạn code phức tạp hoặc một quyết định thiết kế không trực quan, một comment ngắn gọn có thể giúp ích rất nhiều.

Đặc biệt hữu ích khi gọi các hàm có nhiều tham số boolean hoặc khi logic nghiệp vụ phức tạp không thể diễn tả hoàn toàn qua tên hàm.